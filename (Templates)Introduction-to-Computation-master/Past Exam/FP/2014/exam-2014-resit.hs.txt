-- Informatics 1 Functional Programming
-- August 2015

import Test.QuickCheck( quickCheck, 
                        Arbitrary( arbitrary ),
                        oneof, elements, sized, (==>)  )
import Control.Monad -- defines liftM, liftM3, used below
import Data.Char

-- Question 1

-- 1a

f :: [a] -> [a] -> [a]
f = undefined

-- 1b

g :: [a] -> [a] -> [a]
g = undefined

-- Question 2

-- 2a

p :: [Int] -> Bool
p = undefined

-- 2b

q :: [Int] -> Bool
q = undefined

-- 2c

r :: [Int] -> Bool
r = undefined

-- Question 3

data Tree = Empty
          | Leaf Int
          | Node Tree Int Tree
        deriving (Eq, Ord, Show)

data Direction = L | R
        deriving (Eq, Ord, Show)

type Path = [Direction]

-- For QuickCheck

instance Arbitrary Tree where
    arbitrary  =  sized expr
        where
          expr n | n <= 0     =  oneof [elements [Empty]]
                 | otherwise  =  oneof [ liftM Leaf arbitrary
                                       , liftM3 Node subform arbitrary subform
                                       ]
                 where
                   subform  =  expr (n `div` 2)

instance Arbitrary Direction where
    arbitrary     = oneof [return L, return R]

-- For testing

t = Node (Node (Node (Leaf 1)
                     2
                     Empty)
               3
               (Leaf 4))
         5
         (Node Empty
               6
               (Node (Leaf 7)
                     8
                     (Leaf 9)))

t' = Node (Node (Node (Leaf 9)
                      8
                      (Leaf 7))
                6
                Empty)
          5
          (Node (Leaf 4)
                3
                (Node Empty
                      2
                      (Leaf 1)))

present :: Path -> Tree -> Bool
present [] (Leaf n) = True
present [] (Node _ n _) = True
present (L:p) (Node t _ _) = present p t
present (R:p) (Node _ _ t) = present p t
present _ _ = False

-- 3a

label :: Path -> Tree -> Int
label = undefined

-- 3b

type FTree = Path -> Int

toFTree :: Tree -> FTree
toFTree = undefined

-- 3c

mirrorTree :: Tree -> Tree
mirrorTree = undefined

-- 3d

mirrorFTree :: FTree -> FTree
mirrorFTree = undefined
