-- Informatics 1 Functional Programming
-- December 2014
-- SITTING 2 (14:30 - 16:30)

import Test.QuickCheck( quickCheck, 
                        Arbitrary( arbitrary ),
                        oneof, elements, sized, (==>)  )
import Control.Monad -- defines liftM, liftM2, liftM4, used below
import Data.Char

-- Question 1

-- 1a

f :: [Int] -> Bool
f = undefined

-- 1b

g :: [Int] -> Bool
g = undefined

-- Question 2

-- 2a

p :: [Int] -> Int
p = undefined

-- 2b

q :: [Int] -> Int
q = undefined

-- 2c

r :: [Int] -> Int
r = undefined

-- Question 3

data Expr = X
          | Const Integer
          | Expr :+: Expr
          | Expr :-: Expr
          | Expr :*: Expr
          | IfLt Expr Expr Expr Expr
          deriving (Eq, Ord)

-- turns an Expr into a string approximating mathematical notation

showExpr :: Expr -> String
showExpr X          =  "X"
showExpr (Const n)  =  show n
showExpr (p :+: q)  =  "(" ++ showExpr p ++ "+" ++ showExpr q ++ ")"
showExpr (p :-: q)  =  "(" ++ showExpr p ++ "-" ++ showExpr q ++ ")"
showExpr (p :*: q)  =  "(" ++ showExpr p ++ "*" ++ showExpr q ++ ")"
showExpr (IfLt p q r s)  = "(if " ++ showExpr p ++ "<"
                                  ++ showExpr q ++ " then "
                                  ++ showExpr r ++ " else "
                                  ++ showExpr s ++ ")"

-- For QuickCheck

instance Show Expr where
    show  =  showExpr

instance Arbitrary Expr where
    arbitrary  =  sized expr
        where
          expr n | n <= 0     =  oneof [elements [X]]
                 | otherwise  =  oneof [ liftM Const arbitrary
                                       , liftM2 (:+:) subform2 subform2
                                       , liftM2 (:-:) subform2 subform2
                                       , liftM2 (:*:) subform2 subform2
                                       , liftM4 (IfLt) subform4 subform4 subform4 subform4
                                       ]
                 where
                   subform2  =  expr (n `div` 2)
                   subform4  =  expr (n `div` 4)

-- 3a

eval :: Expr -> Integer -> Integer
eval = undefined

-- 3 b

protect :: Expr -> Expr
protect (Const n)       =  if n<0 then Const 0 else Const n
protect e               =  undefined
