-- Informatics 1 Functional Programming
-- December 2018
-- SITTING 2 (14:30 - 16:30)

import Test.QuickCheck
import Control.Monad
import Data.Char

-- Question 1

-- 1a

f :: String -> Int
f cs = sum [ n | (c,n) <- zip cs [0..], isDigit c ]

test_1a =
  f "" == 0 &&
  f "0 is the first position" == 0 &&
  f "I Love Functional Programming" == 0 &&
  f "2nite is 2 L8" == 21 &&
  f "0131 650 1000" == 66 &&
  f "1oTs & LoT5 of Num63r5" == 68

-- 1b

g :: String -> Int
g cs = g' cs 0

g' :: String -> Int -> Int
g' [] n = 0
g' (c:cs) n | isDigit c = n + g' cs (n+1)
            | otherwise   = g' cs (n+1)

test_1b =
  g "" == 0 &&
  g "0 is the first position" == 0 &&
  g "I Love Functional Programming" == 0 &&
  g "2nite is 2 L8" == 21 &&
  g "0131 650 1000" == 66 &&
  g "1oTs & LoT5 of Num63r5" == 68

prop_fg :: String -> Bool
prop_fg cs = f cs == g cs

-- Question 2

-- 2a

p :: [(Int,Int)] -> Bool
p xs = sum [m * n | (m,n) <- xs, n >= 0] >0
        
test_2a =
  p [] == False &&
  p [(-1,-2),(-3,-5)] == False &&
  p [(4,5),(-7,3)] == False &&
  p [(4,5),(-6,3),(2,-2)] == True &&
  p [(4,5),(-6,3),(-2,2)] == False &&
  p [(4,-5),(-3,2),(1,6),(-3,-1)] == False

-- 2b

q :: [(Int,Int)] -> Bool
q xs = q1 xs > 0

q1 :: [(Int,Int)] -> Int
q1 [] = 0
q1 ((m,n):xs) | n < 0     = q1 xs
              | otherwise = (m * n) + q1 xs

test_2b =
  q [] == False &&
  q [(-1,-2),(-3,-5)] == False &&
  q [(4,5),(-7,3)] == False &&
  q [(4,5),(-6,3),(2,-2)] == True &&
  q [(4,5),(-6,3),(-2,2)] == False &&
  q [(4,-5),(-3,2),(1,6),(-3,-1)] == False

-- 2c

r :: [(Int,Int)] -> Bool
r xs = (foldr (+) 0 (map (uncurry (*)) (filter ((>=0).snd) xs))) >0

test_2c =
  r [] == False &&
  r [(-1,-2),(-3,-5)] == False &&
  r [(4,5),(-7,3)] == False &&
  r [(4,5),(-6,3),(2,-2)] == True &&
  r [(4,5),(-6,3),(-2,2)] == False &&
  r [(4,-5),(-3,2),(1,6),(-3,-1)] == False

prop_pqr :: [(Int,Int)] -> Bool
prop_pqr xs = p xs == q xs && q xs == r xs

-- Question 3

data Tree a = Lf a | Tree a :+: Tree a
  deriving (Eq, Show)

instance Arbitrary a => Arbitrary (Tree a) where
  arbitrary = sized gen
    where
    gen 0 = liftM Lf arbitrary
    gen n | n>0 =
      oneof [liftM Lf arbitrary,
             liftM2 (:+:) tree tree]
      where
      tree = gen (n `div` 2)

-- 3a

left :: Tree a -> Bool
left (Lf x)         =  True
left (xt :+: Lf x)  =  left xt
left (_ :+: _)      =  False

prop_left :: Bool
prop_left
  =   left (Lf 1)                                 ==  True
  &&  left (((Lf 1 :+: Lf 2) :+: Lf 3) :+: Lf 4)  ==  True 
  &&  left ((Lf 1 :+: Lf 2) :+: (Lf 3 :+: Lf 4))  ==  False
  &&  left (Lf "a" :+: (Lf "b" :+: Lf "c"))       ==  False
  &&  left ((Lf "a" :+: Lf "b") :+: Lf "c")       ==  True


-- 3b

leaves :: Tree a -> [a]
leaves (Lf x)       =  [x]
leaves (xt :+: yt)  =  leaves xt ++ leaves yt

prop_leaves :: Bool
prop_leaves
  =   leaves (Lf 1)                                 ==  [1]
  &&  leaves (Lf 1 :+: (Lf 2 :+: (Lf 3 :+: Lf 4)))  ==  [1,2,3,4]
  &&  leaves ((Lf 1 :+: Lf 2) :+: (Lf 3 :+: Lf 4))  ==  [1,2,3,4]
  &&  leaves (Lf "a" :+: (Lf "b" :+: Lf "c"))       ==  ["a","b","c"]
  &&  leaves ((Lf "a" :+: Lf "b") :+: Lf "c")       ==  ["a","b","c"]

-- 3c

shift :: Tree a -> Tree a
shift (Lf x)                =  Lf x
shift (xt :+: Lf x)         =  shift xt :+: Lf x
shift (xt :+: (yt :+: zt))  =  shift ((xt :+: yt) :+: zt)

prop_shift :: Bool
prop_shift
  =   shift (Lf 1)
        ==  (Lf 1)
  &&  shift (((Lf 1 :+: Lf 2) :+: Lf 3) :+: Lf 4)
        ==  (((Lf 1 :+: Lf 2) :+: Lf 3) :+: Lf 4)
  &&  shift ((Lf 1 :+: Lf 2) :+: (Lf 3 :+: Lf 4))
        ==  (((Lf 1 :+: Lf 2) :+: Lf 3) :+: Lf 4)
  &&  shift (Lf "a" :+: (Lf "b" :+: Lf "c"))
        ==  ((Lf "a" :+: Lf "b") :+: Lf "c")
  &&  shift ((Lf "a" :+: Lf "b") :+: Lf "c")
        ==  ((Lf "a" :+: Lf "b") :+: Lf "c")

prop_tree :: Eq a => Tree a -> Bool
prop_tree xt  =  left (shift xt) && leaves xt == leaves (shift xt)

main
  =   quickCheck test_1a
  >>  quickCheck test_1b
  >>  quickCheck test_2a
  >>  quickCheck test_2b
  >>  quickCheck test_2c
  >>  quickCheck prop_fg
  >>  quickCheck prop_pqr
  >>  quickCheck prop_left
  >>  quickCheck prop_leaves
  >>  quickCheck prop_shift
  >>  quickCheck prop_int
  >>  quickCheck prop_string
  where
  prop_int    :: Tree Int -> Bool
  prop_int    =  prop_tree
  prop_string :: Tree String -> Bool
  prop_string =  prop_tree
